iff	AST_COMMON
hdr	pthread
hdr	types
sys	types
typ	size_t,ssize_t
typ	long.double

mac SF_CLOSE    sys/socket.h
mac SF_APPEND   sys/stat.h

proto	stdc note{ Standard-C prototypes ok }end compile{
	extern int foo(int, int);
	bar()
	{	foo(1, 1);
	}
}end

dll	import note{ Microsoft import/export nonsense }end execute{
	__declspec(dllimport) int foo;
	main() { return foo == 5 ? 0 : 1; }
	int	bar = 5;
	int*	_imp__foo = &bar;
}end

xopen	stdio note{ Stdio fseek/fflush are X/Open-compliant }end execute{
	#include	<stdio.h>
	#define Failed(file)	(unlink(file),1)
	main(int argc, char** argv)
	{	FILE	*f1, *f2;
		char	file[1024], buf[1024], *f, *t;
		int	i, fd;

		/* create file */
		for(f = argv[0], t = file; (*t = *f++) != 0; )
			t++;
		*t++ = '.'; *t++ = 'D'; *t++ = 0;
		if((fd = creat(file,0666)) < 0)
			return 1;

		for (i = 0; i < sizeof(buf); ++i)
			buf[i] = '0' + (i%10);
		for (i = 0; i < 16; ++i)
			if (write(fd,buf,sizeof(buf)) != sizeof(buf))
				return Failed(file);
		close(fd);

		if(!(f1 = fopen(file,"r+")) ||
		   (fd = dup(fileno(f1))) < 0 ||
		   !(f2 = fdopen(fd,"r+")) )
			return Failed(file);

		if(fread(buf, 1, 7, f2) != 7 || ftell(f2) != 7)
			return Failed(file);

		if(fseek(f1, 1010, 0) < 0 || ftell(f1) != 1010)
			return Failed(file);

		fflush(f2); /* this should set the seek location to 1010 */
		if(ftell(f2) != 1010)
			return Failed(file);

		unlink(file);
		return 0;
	}
}end

cat{
	/* dynamic linked library external scope handling */
	#undef extern
	#if _dll_import && !defined(__EXPORT__) && _DLL_BLD
	#define __EXPORT__	__declspec(dllexport)
	#endif
	#if _dll_import && !defined(__IMPORT__)
	#define __IMPORT__	__declspec(dllimport)
	#endif
	#if !defined(_astimport)
	#if defined(__IMPORT__) && _DLL_BLD
	#define _astimport	__IMPORT__
	#else
	#define _astimport	extern
	#endif
	#endif /*_astimport*/
}end

cat{
	#ifndef _AST_STD_H
	#	if _sys_types
	#	include	<sys/types.h>
	#	endif
	#endif
	#if !_typ_ssize_t
	#	define _typ_ssize_t	1
		typedef int ssize_t;
	#endif
}end
