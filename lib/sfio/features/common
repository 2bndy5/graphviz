iff	AST_COMMON
hdr	pthread
hdr	types
sys	types
typ	size_t,ssize_t
typ	long.double

mac	SF_CLOSE	sys/socket.h
mac	SF_APPEND	sys/stat.h

proto	stdc note{ Standard-C prototypes ok }end compile{
	extern int foo(int, int);
	bar()
	{	foo(1, 1);
	}
}end

dll	import note{ Microsoft import/export nonsense }end execute{
	__declspec(dllimport) int foo;
	main() { return foo == 5 ? 0 : 1; }
	int	bar = 5;
	int*	_imp__foo = &bar;
}end

xopen	stdio note{ Stdio fseek/fflush are X/Open-compliant }end execute{
	#include	<stdio.h>
	#define Failed(file)	(unlink(file),1)
	main(int argc, char** argv)
	{	FILE	*f1, *f2;
		char	file[1024], buf[1024], *f, *t;
		int	i, fd;

		/* create file */
		for(f = argv[0], t = file; (*t = *f++) != 0; )
			t++;
		*t++ = '.'; *t++ = 'D'; *t++ = 0;
		if((fd = creat(file,0666)) < 0)
			return 1;

		for (i = 0; i < sizeof(buf); ++i)
			buf[i] = '0' + (i%10);
		for (i = 0; i < 16; ++i)
			if (write(fd,buf,sizeof(buf)) != sizeof(buf))
				return Failed(file);
		close(fd);

		if(!(f1 = fopen(file,"r+")) ||
		   (fd = dup(fileno(f1))) < 0 ||
		   !(f2 = fdopen(fd,"r+")) )
			return Failed(file);

		if(fread(buf, 1, 7, f2) != 7 || ftell(f2) != 7)
			return Failed(file);

		if(fseek(f1, 1010, 0) < 0 || ftell(f1) != 1010)
			return Failed(file);

		fflush(f2); /* this should set the seek location to 1010 */
		if(ftell(f2) != 1010)
			return Failed(file);

		unlink(file);
		return 0;
	}
}end

cat{

	/* extern symbols must be protected against C++ name mangling */
	#ifndef _BEGIN_EXTERNS_
	#if __cplusplus || c_plusplus
	#define _BEGIN_EXTERNS_	extern "C" {
	#define _END_EXTERNS_	}
	#else
	#define _BEGIN_EXTERNS_
	#define _END_EXTERNS_
	#endif
	#endif /*_BEGIN_EXTERNS_*/

	/* dynamic linked library external scope handling */
	#undef extern
	#if _dll_import && !defined(__EXPORT__) && _DLL_BLD
	#define __EXPORT__	__declspec(dllexport)
	#endif
	#if _dll_import && !defined(__IMPORT__)
	#define __IMPORT__	__declspec(dllimport)
	#endif
	#if !defined(_astimport)
	#if defined(__IMPORT__) && _DLL_BLD
	#define _astimport	__IMPORT__
	#else
	#define _astimport	extern
	#endif
	#endif /*_astimport*/
}end

cat{
	#ifndef _AST_STD_H
	#	if _sys_types
	#	include	<sys/types.h>
	#	endif
	#endif
	#if !_typ_ssize_t
	#	define _typ_ssize_t	1
		typedef int ssize_t;
	#endif
}end

tst - -DTRY=1 - -DTRY=1 -Dvoid=char - -DTRY=2 - -DTRY=3 - -DTRY=4 output{
	#define printf	______printf
	#ifdef __STDC__
	#include <stdarg.h>
	#else
	#include <varargs.h>
	#endif
	#undef	printf
	_BEGIN_EXTERNS_
	extern int	printf(const char*, ...);
	_END_EXTERNS_
	static va_list ap;
	main()
	{
	#if TRY == 4
		printf("\n#ifndef va_listref\n");
		printf("#define va_listref(p) (&(p))\t");
			printf("/* pass va_list to varargs function */\n");
		printf("#define va_listval(p) (*(p))\t");
			printf("/* retrieve va_list from va_arg(ap,va_listarg) */\n");
		printf("#define va_listarg va_list*\t");
			printf("/* va_arg() va_list type */\n");
	#else
	#if TRY == 1
		*ap++;
	#endif /*TRY == 1*/
	#if TRY == 2
		*ap;
	#endif /*TRY == 2*/
	#if TRY == 3
		ap++;
	#endif /*TRY == 3*/

		printf("\n#ifndef va_listref\n");
		printf("#define va_listref(p) (p)\t");
			printf("/* pass va_list to varargs function */\n");
		printf("#define va_listval(p) (p)\t");
			printf("/* retrieve va_list from va_arg(ap,va_listarg) */\n");
	#if TRY == 2
		printf("#define va_listarg va_list*\t");
	#else
		printf("#define va_listarg va_list\t");
	#endif /*TRY == 2*/
			printf("/* va_arg() va_list type */\n");
	#endif /*TRY == 4*/

	#if defined(_WIN32) || !defined(va_copy)
	#if TRY == 2
		printf("#define va_copy(to,fr) memcpy(to,fr,sizeof(va_list))\t");
			printf("/* copy va_list fr -> to */\n");
	#else
		printf("#define va_copy(to,fr) ((to)=(fr))\t");
			printf("/* copy va_list fr -> to */\n");
	#endif
	#endif

	printf("#undef	_ast_va_list\n");
	printf("#ifdef	va_start\n");
	printf("#define _ast_va_list va_list\n");
	printf("#else\n");
	#if TRY == 1 || TRY == 2
		printf("#define _ast_va_list void*\t");
	#else
	#if TRY == 3
		if (sizeof(va_list) == sizeof(long))
			printf("#define _ast_va_list long\t");
		else if (sizeof(va_list) == sizeof(short))
			printf("#define _ast_va_list short\t");
		else
			printf("#define _ast_va_list int\t");
	#else
		printf("#define _ast_va_list ...\t");
	#endif
	#endif
		printf("/* va_list that avoids #include */\n");
		printf("#endif\n\n");
		printf("#endif\n");
		return 0;
	}
}end
